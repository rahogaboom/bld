#!/usr/bin/perl

#
# clean the entire project build directory or specific target directories.  do 'perldoc bld.<project>.rm'.
#

# standard modules
use strict;
use warnings;
use diagnostics;
use autodie;
use Getopt::Long;

# croak() - die with better info than die()
use Carp qw(
               croak
           );

my
(
    # the project name
    $project,

    # clean all targets
    $opt_all,

    # the bld.$project.targets file
    @TargetsFile,

    # hash(set to undef) and array of all valid targets in the bld.$project.targets file
    %ValidTargetsTargetsFile,
    @ValidTargetsTargetsFile,

    # array of all valid(not) targets from bld.$project.targets file or cmd line.
    @ValidTargets,
    @notValidTargets,

    # regexs
    $RGX_BLANK_LINE,
    $RGX_COMMENT_LINE,
    $RGX_VALID_TARGET_CHARS,
    $END,

    # file names
    $TARGETSFN,
    $BFN,
);

BEGIN
{
    # get the project name from the bld.$project.rm middle part of the name of this script
    ($project) = $0 =~ m{bld\.([^.]*)\.rm?$};

    if ( not defined $project )
    {
        croak("$0: project name not matched at end of $0\n");
    }

    $RGX_BLANK_LINE         = qr{ ^\s*$ }x;
    $RGX_COMMENT_LINE       = qr{ ^\s*\# }x;
    $RGX_VALID_TARGET_CHARS = qr{ [/A-Za-z0-9-_.] }x;

    $TARGETSFN = "bld.$project.targets";
    $BFN       = "Bld";

    # stops processing bld.<project>.targets file
    $END       = "END";
}

GetOptions
(    
    "all" => \$opt_all,
) or croak("GetOptions() failed(only --all option allowed).");

if ( $opt_all )
{
    croak("No arguments allowed if --all option specified.") if @ARGV > 0;
}
else
{
    croak("One or more arguments required if --all option not specified.") if @ARGV <= 0;
}

# each not blank or not a comment line is a valid target argument to bld.$project e.g. './bld.$project $target'
# and will build one(that named) library or executable
if ( not -e $TARGETSFN )
{
    croak("$TARGETSFN cannot be opened.");
}
open my $fh, "<", $TARGETSFN;
@TargetsFile = <$fh>;
close $fh;
chomp @TargetsFile;

foreach my $target ( @TargetsFile )
{
    # ignore if comment or blank line
    next if ( $target =~ $RGX_COMMENT_LINE or $target =~ $RGX_BLANK_LINE );

    # if line starts with "END" ignore rest of file - for development/debugging
    last if ( $target =~ m/^$END/ );

    # if target line is not a single token of valid target chars warn and exit(fix $TARGETSFN file)
    if ( not $target =~ m{^$RGX_VALID_TARGET_CHARS+$} )
    {
        print "bld.$project.rm: Invalid target line(invalid chars): \'$target\' in $TARGETSFN file.\n";
        exit 1;
    }

    # check if more than one forward slash
    if ( (my $count = ($target =~ tr/\///)) > 1 )
    {
        print "bld.$project: Invalid target line(more than one '/'): \'$target\' in $TARGETSFN file.\n";
        exit 1;
    }

    push @ValidTargetsTargetsFile, $target;
    $ValidTargetsTargetsFile{$target} = undef;
}

if ( $opt_all )
{
    @ValidTargets = @ValidTargetsTargetsFile;
}
else
{
    # add valid cmd line targets to @ValidTargetsCmdLine and not valid cmd line targets to @notValidTargetsCmdLine
    foreach my $arg ( @ARGV )
    {
        if ( exists $ValidTargetsTargetsFile{$arg} )
        {
            push @ValidTargets, $arg;
        }
        else
        {
            push @notValidTargets, $arg;
        }
    }

    # if a cmd line specified target is not valid, exit
    if ( @notValidTargets )
    {
        print "bld.$project: \@notValidTargets: @notValidTargets\n";
        exit 1;
    }
}

# clean each of the valid targets
foreach my $target ( @ValidTargets )
{
    # if one forward slash, separate directory name from target name - identical
    # $target names can be accommodated, disambiguated in different directories.
    # see perldoc USAGE below.
    my $dir = "";
    if ( $target =~ m/^(.*\/)(.*)/ )
    {
        $dir = $1;
        $target = $2;
    }

    print "Cleaning $dir$target\n";

    chdir "$dir$target";
    my @files = `ls`;
    foreach my $file ( @files )
    {
        chomp $file;
        if ( -f $file )
        {
            if (
                   not $file =~ m{^bld\.$project\.$target\.script\..*$} and # the bld.$project.$target.script.* file(s)
                   not $file =~ m{^$BFN\.$project\.$target$}                # the Bld.$project.$target file
               )
            {
                `rm -f $file`;
            }
        }
    }
    chdir "..";
    if ( $dir ne "" )
    {
        chdir "..";
    }
}

1;

__END__

=head1 NAME

 bld.<project>.rm

=head1 USAGE

 usage: bld.<project>.rm <[--all] | [target] [target] ...>
     --all    - remove in all valid targets all files not matching:
                bld.$project.$target.script.* file(s)
                Bld.$project.$target file
                mutually exclusive of specifying any cmd line [target]s.
                do not remove any subdirectories in a target file directory.
     [target] - remove in cmd line specified directories all files not matching:
                bld.$project.$target.script.* file(s)
                Bld.$project.$target file
                mutually exclusive of specifying --all.
                do not remove any subdirectories in a target file directory.

     the main build directory(Bld.<project>/<version>) may store scripts not
     related to any particular target and any other project files.  all target
     directories may contain subdirectories with specific target related
     infomation.  these will not be affected by bld.<project>.rm.

=head1 REQUIRED ARGUMENTS

 None

=head1 OPTIONS

 --all   remove in all directories all files not matching:
         see above usage msg

=head1 DESCRIPTION

 bld.<project>.rm is used for removing project files.  see above usage msg.

 It makes no sense to run this program in any other directory than Bld.<project>/<version>.

=head1 CONFIGURATION AND ENVIRONMENT

 No configuration files or environment variables are used.

=head1 FILES

 bld.<project>.targets - all of the project targets are specified, one to a line.

 If a line begins with "END" then all targets after the "END" are ignored.

=head1 DEPENDENCIES

 None

=head1 EXAMPLES

 './bld.<project>.rm target [target] ..'
 './bld.<project>.rm --all'

=head1 SEE ALSO

 Bld.gv.<project>
 bld.<project>
 bld.<project>.README
 bld.<project>.install
 bld.<project>.targets
 bld.<project>.script.*
 Bld.<project>.<target>

=head1 AUTHOR

 Richard A Hogaboom
 richard.hogaboom@gmail.com

