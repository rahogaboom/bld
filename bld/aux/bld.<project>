#!/usr/bin/perl

#
# bld the entire project or specific targets.  do 'perldoc bld.<project>'.
#

# standard modules
use strict;
use warnings;
use diagnostics;
use autodie;
use Getopt::Long;

# croak() - die with better info than die()
use Carp qw(
               croak
           );

my
(
    # the project name
    $project,

    # bld all targets
    $opt_all,

    # the bld.$project.targets file
    @TargetsFile,

    # hash(set to undef) and array of all valid targets in the bld.$project.targets file
    %ValidTargetsTargetsFile,
    @ValidTargetsTargetsFile,

    # array of all valid(not) targets from bld.$project.targets file or cmd line.
    @ValidTargets,
    @notValidTargets,

    # the bld directory i.e. location of ./bld perl script
    $BLDDIR,

    # regexs
    $RGX_BLANK_LINE,
    $RGX_COMMENT_LINE,
    $RGX_VALID_TARGET_CHARS,
    $END,

    # file names
    $TARGETSFN,
    $BFN,
    $SIGFN,
    $BGVFN,
    $BIFN,
    $BWFN,
    $BFFN,
);

BEGIN
{
    # get the project name from the end of the name of this script
    ($project) = $0 =~ m{bld\.([^.]*?)$};

    if ( not defined $project )
    {
        croak("$0: project name not matched at end of $0\n");
    }

    # the bld directory will always be two directories above - Bld.<project>/<version>/bld.<project>
    $BLDDIR    = `cd ../..;pwd;`;
    chomp $BLDDIR;

    $RGX_BLANK_LINE         = qr{ ^\s*$ }x;
    $RGX_COMMENT_LINE       = qr{ ^\s*\# }x;
    $RGX_VALID_TARGET_CHARS = qr{ [/A-Za-z0-9-_.] }x;

    $TARGETSFN = "bld.$project.targets";
    $BFN       = "Bld";
    $SIGFN     = "Bld.sig";
    $BGVFN     = "Bld.gv";
    $BIFN      = "bld.info";
    $BWFN      = "bld.warn";
    $BFFN      = "bld.fatal";

    # stops processing bld.<project>.targets file
    $END       = "END";
}

GetOptions
(    
    "all" => \$opt_all,
) or croak("GetOptions() failed(only --all option allowed).");

if ( $opt_all )
{
    croak("No arguments allowed if --all option specified.") if @ARGV > 0;
}
else
{
    croak("One or more arguments required if --all option not specified.") if @ARGV <= 0;
}

# each not blank or not a comment line is a valid target argument to bld.$project e.g. './bld.$project $target'
# and will build one(that named) library or executable
if ( not -e $TARGETSFN )
{
    croak("$TARGETSFN cannot be opened.");
}
open my $fh, "<", $TARGETSFN;
@TargetsFile = <$fh>;
close $fh;
chomp @TargetsFile;

foreach my $target ( @TargetsFile )
{
    # ignore if comment or blank line
    next if ( $target =~ $RGX_COMMENT_LINE or $target =~ $RGX_BLANK_LINE );

    # if line starts with "END" ignore rest of file - for development/debugging
    last if ( $target =~ m/^$END/ );

    # if target line is not a single token of valid target chars warn and exit(fix $TARGETSFN file)
    if ( not $target =~ m{^$RGX_VALID_TARGET_CHARS+$} )
    {
        print "bld.$project: Invalid target line(invalid chars): \'$target\' in $TARGETSFN file.\n";
        exit 1;
    }

    # check if more than one forward slash
    if ( (my $count = ($target =~ tr/\///)) > 1 )
    {
        print "bld.$project: Invalid target line(more than one '/'): \'$target\' in $TARGETSFN file.\n";
        exit 1;
    }

    push @ValidTargetsTargetsFile, $target;
    $ValidTargetsTargetsFile{$target} = undef;
}

if ( $opt_all )
{
    @ValidTargets = @ValidTargetsTargetsFile;
}
else
{
    # add valid cmd line targets to @ValidTargetsCmdLine and not valid cmd line targets to @notValidTargetsCmdLine
    foreach my $arg ( @ARGV )
    {
        if ( exists $ValidTargetsTargetsFile{$arg} )
        {
            push @ValidTargets, $arg;
        }
        else
        {
            push @notValidTargets, $arg;
        }
    }

    # if a cmd line specified target is not valid, exit
    if ( @notValidTargets )
    {
        print "bld.$project: \@notValidTargets: @notValidTargets\n";
        exit 1;
    }
}

# copy bld global variables
if ( -e "$BGVFN.$project" )
{
    `cp $BGVFN.$project $BLDDIR/$BGVFN;`;
}
else
{
    `rm -f $BLDDIR/$BGVFN;`;
}

# bld each of the valid targets
foreach my $target ( @ValidTargets )
{
    # if one forward slash, separate directory name from target name - identical
    # $target names can be accommodated, disambiguated in different directories.
    # see perldoc USAGE below.
    my $dir = "";
    if ( $target =~ m/^(.*\/)(.*)/ )
    {
        $dir = $1;
        $target = $2;
    }

    print "#####################################\n";
    print "'bld'ing $dir$target\n";

    if ( -e "$dir$target/$BFN.$project.$target" )
    {
        `cp "$dir$target/$BFN.$project.$target" $BLDDIR/$BFN;`;
    }
    else
    {
        print "bld.$project: Missing $dir$target/$BFN.$project.$target file.\n";
        exit 1;
    }

    if ( -e "$dir$target/$target" )
    {
        `cp "$dir$target/$target" $BLDDIR;`;
    }

    `rm -f $BLDDIR/$SIGFN;`;

    if ( -e "$dir$target/$SIGFN.$project.$target" )
    {
        `cp "$dir$target/$SIGFN.$project.$target" $BLDDIR/$SIGFN;`;
    }

    # execute ./bld to bld the current target
    print `                    # the stdout print will normally not print anything
              cd $BLDDIR;      # the main bld dir two up
              ./bld;           # do bld - bld outputs to stderr
              cd - >/dev/null; # cd back to Bld.<project>/<version> dir - the >/dev/null gets rid of a path print
              cp $BLDDIR/$SIGFN "$dir$target/$SIGFN.$project.$target";
              cp $BLDDIR/$BIFN "$dir$target/$BIFN.$project.$target";
              cp $BLDDIR/$BWFN "$dir$target/$BWFN.$project.$target";
              cp $BLDDIR/$BFFN "$dir$target/$BFFN.$project.$target";
          `;

    if ( -e "$BLDDIR/$target" )
    {
        `cp $BLDDIR/$target "$dir$target/$target";`;
        `cd $BLDDIR;./bld.rm;`;
    }
}

1;

__END__

=head1 NAME

 bld.<project>

=head1 USAGE

 usage: bld.<project> <[--all] | [target] [target] ...>
     --all    - bld all targets in the bld.<project>.targets file.  each
                target will have a target directory named for the target.  the
                Bld.$project.$target file and bld.$project.$target.script.*
                file(s) which describe what is to be built for the target are
                in these directories.  mutually exclusive of specifying any
                cmd line targets.
     [target] - bld a target specified in the bld.<project>.targets file.
                mutually exclusive of specifying --all.

     the main build directory(Bld.<project>/<version>) may store scripts not
     related to any particular target and any other project files.  all target
     directories may contain subdirectories with specific target related
     infomation.  these will not be affected by bld.<project>.rm.

     bld.<project> supports bld'ing targets with identical names.  They must,
     however, be disambiguated in different directories.  targets may be named
     in the bld.<project>.targets file in the <dir>/<target> format.  only one
     slash is allowed e.g. xdiff/lib.a and vcs-svn/lib.a.

=head1 REQUIRED ARGUMENTS

 None

=head1 OPTIONS

 --all - bld all targets in the bld.<project>.targets file.

=head1 DESCRIPTION

 bld.<project> is used for bld'ing the project targets; all of which are specified
     in the bld.<project>.targets file.  each target will have a target directory
     named for the target.  the Bld.$project.$target file and bld.$project.$target.script.*
     file(s) which describe what is to be built for the target are in these directories.
     the order of target bld's is important.  if './bld.<project> --all' is used to bld
     all targets then dependencies must be built first, that is, libraries then executables.
 In addition to the target, three additional files will be built:
     bld.warn.<project>.<target>
     bld.info.<project>.<target>
     bld.fatal.<project>.<target>
 These will be put in the target directory.

 These correspond to the standard bld.warn, bld.info and bld.fatal files -
 only with the .<project>.<target> appended.

 It makes no sense to run this program in any other directory than Bld.<project>/<version>.

=head1 CONFIGURATION AND ENVIRONMENT

 No configuration files or environment variables are used.

=head1 FILES

 bld.<project>.targets - all of the project targets - one to a line.

 If a line begins with "END" then all targets after the "END" are ignored.

=head1 DEPENDENCIES

 None

=head1 EXAMPLES

 './bld.$project credential-store xdiff/lib.a' - bld the 'credential-store' executable and
  the 'lib.a' library
 './bld.$project --all' - bld all valid targets if option is '--all'(no args allowed)

=head1 SEE ALSO

 Bld.gv.<project>
 bld.<project>.README
 bld.<project>.install
 bld.<project>.rm
 bld.<project>.targets
 bld.<project>.script.*
 Bld.<project>.<target>

=head1 AUTHOR

 Richard A Hogaboom
 richard.hogaboom@gmail.com

